"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ExportWriter = void 0;
const path = require("path");
const constructs_1 = require("constructs");
const export_reader_provider_1 = require("./export-reader-provider");
const types_1 = require("./types");
const cfn_dynamic_reference_1 = require("../../cfn-dynamic-reference");
const custom_resource_1 = require("../../custom-resource");
const lazy_1 = require("../../lazy");
const uniqueid_1 = require("../../private/uniqueid");
const stack_1 = require("../../stack");
const custom_resource_provider_1 = require("../custom-resource-provider");
const token_1 = require("../../token");
/**
 * Creates a custom resource that will return a list of stack exports from a given
 * AWS region. The export can then be referenced by the export name.
 *
 *
 * @example
 * declare const app: App;
 * const stack1 = new Stack(app, 'East1Stack', { env: { region: 'us-east-1' } });
 * new CfnOutput(stack1, 'Output', { value: 'someValue', exportName: 'someName' });
 *
 * const stack2 = new Stack(app, 'East2Stack', { env: { region: 'us-east-2' } });
 * const exportReader = new ExportReader(stack2, 'ExportReader', { region: 'us-east-1' });
 * const anotherResource = new CfnResource(stack2, 'AnotherResource', {
 *   Parameters: {
 *     SomeParam: exportReader.importValue('someName'),
 *   },
 * });
 *
 * @internal - this is intentionally not exported from core
 */
class ExportWriter extends constructs_1.Construct {
    static getOrCreate(scope, uniqueId, props) {
        const stack = stack_1.Stack.of(scope);
        const existing = stack.node.tryFindChild(uniqueId);
        return existing
            ? existing
            : new ExportWriter(stack, uniqueId, {
                region: props.region,
            });
    }
    constructor(scope, id, props) {
        super(scope, id);
        this._references = {};
        this.resourceArns = new Set;
        const stack = stack_1.Stack.of(this);
        const region = props.region ?? stack.region;
        this.addRegionToPolicy(region);
        const resourceType = 'Custom::CrossRegionExportWriter';
        this.provider = custom_resource_provider_1.CustomResourceProvider.getOrCreateProvider(this, resourceType, {
            codeDirectory: path.join(__dirname, 'cross-region-ssm-writer-handler'),
            runtime: (0, custom_resource_provider_1.builtInCustomResourceProviderNodeRuntime)(this),
            policyStatements: [{
                    Effect: 'Allow',
                    Resource: lazy_1.Lazy.list({
                        produce: () => [
                            ...Array.from(this.resourceArns),
                        ],
                    }),
                    Action: [
                        'ssm:DeleteParameters',
                        'ssm:ListTagsForResource',
                        'ssm:GetParameters',
                        'ssm:PutParameter',
                    ],
                }],
        });
        const properties = {
            region: region,
            exports: lazy_1.Lazy.any({ produce: () => this._references }),
        };
        new custom_resource_1.CustomResource(this, 'Resource', {
            resourceType: resourceType,
            serviceToken: this.provider.serviceToken,
            properties: {
                WriterProps: properties,
            },
        });
    }
    /**
     * Register a reference with the writer and returns a CloudFormation Stack export by name
     *
     * The value will be "exported" via the ExportWriter. It will perform
     * the export by creating an SSM parameter in the region that the consuming
     * stack is created.
     *
     * @param exportName the unique name associated with the export
     * @param reference the value that will be exported
     * @returns a reference to the reader custom resource
     */
    exportValue(exportName, reference, importStack) {
        const stack = stack_1.Stack.of(this);
        const parameterName = `/${types_1.SSM_EXPORT_PATH_PREFIX}${exportName}`;
        const ref = new cfn_dynamic_reference_1.CfnDynamicReference(cfn_dynamic_reference_1.CfnDynamicReferenceService.SSM, parameterName);
        this._references[parameterName] = stack.resolve(reference.toString());
        return this.addToExportReader(parameterName, ref, importStack);
    }
    /**
     * Add a resource arn for the consuming stack region
     * Each writer could be writing to multiple regions and needs
     * permissions to each region.
     *
     * If the region is not resolved then do not add anything.
     */
    addRegionToPolicy(region) {
        if (!token_1.Token.isUnresolved(region)) {
            this.resourceArns.add(stack_1.Stack.of(this).formatArn({
                service: 'ssm',
                resource: 'parameter',
                region,
                resourceName: `${types_1.SSM_EXPORT_PATH_PREFIX}*`,
            }));
        }
    }
    /**
     * Add the export to the export reader which is created in the importing stack
     */
    addToExportReader(exportName, exportValueRef, importStack) {
        const readerConstructName = (0, uniqueid_1.makeUniqueId)(['ExportsReader']);
        const exportReader = export_reader_provider_1.ExportReader.getOrCreate(importStack.nestedStackParent ?? importStack, readerConstructName);
        this.addRegionToPolicy(importStack.region);
        return exportReader.importValue(exportName, exportValueRef);
    }
}
exports.ExportWriter = ExportWriter;
//# sourceMappingURL=data:application/json;base64,