"use strict";
var _a;
Object.defineProperty(exports, "__esModule", { value: true });
exports.CfnFlywheel = void 0;
const jsiiDeprecationWarnings = require("../../.warnings.jsii.js");
const JSII_RTTI_SYMBOL_1 = Symbol.for("jsii.rtti");
const cdk = require("../../core");
const cfn_parse = require("../../core/lib/helpers-internal");
/**
 * Determine whether the given properties match those of a `CfnFlywheelProps`
 *
 * @param properties - the TypeScript properties of a `CfnFlywheelProps`
 *
 * @returns the result of the validation.
 */
function CfnFlywheelPropsValidator(properties) {
    if (!cdk.canInspect(properties)) {
        return cdk.VALIDATION_SUCCESS;
    }
    const errors = new cdk.ValidationResults();
    if (typeof properties !== 'object') {
        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));
    }
    errors.collect(cdk.propertyValidator('activeModelArn', cdk.validateString)(properties.activeModelArn));
    errors.collect(cdk.propertyValidator('dataAccessRoleArn', cdk.requiredValidator)(properties.dataAccessRoleArn));
    errors.collect(cdk.propertyValidator('dataAccessRoleArn', cdk.validateString)(properties.dataAccessRoleArn));
    errors.collect(cdk.propertyValidator('dataLakeS3Uri', cdk.requiredValidator)(properties.dataLakeS3Uri));
    errors.collect(cdk.propertyValidator('dataLakeS3Uri', cdk.validateString)(properties.dataLakeS3Uri));
    errors.collect(cdk.propertyValidator('dataSecurityConfig', CfnFlywheel_DataSecurityConfigPropertyValidator)(properties.dataSecurityConfig));
    errors.collect(cdk.propertyValidator('flywheelName', cdk.requiredValidator)(properties.flywheelName));
    errors.collect(cdk.propertyValidator('flywheelName', cdk.validateString)(properties.flywheelName));
    errors.collect(cdk.propertyValidator('modelType', cdk.validateString)(properties.modelType));
    errors.collect(cdk.propertyValidator('tags', cdk.listValidator(cdk.validateCfnTag))(properties.tags));
    errors.collect(cdk.propertyValidator('taskConfig', CfnFlywheel_TaskConfigPropertyValidator)(properties.taskConfig));
    return errors.wrap('supplied properties not correct for "CfnFlywheelProps"');
}
/**
 * Renders the AWS CloudFormation properties of an `AWS::Comprehend::Flywheel` resource
 *
 * @param properties - the TypeScript properties of a `CfnFlywheelProps`
 *
 * @returns the AWS CloudFormation properties of an `AWS::Comprehend::Flywheel` resource.
 */
// @ts-ignore TS6133
function cfnFlywheelPropsToCloudFormation(properties) {
    if (!cdk.canInspect(properties)) {
        return properties;
    }
    CfnFlywheelPropsValidator(properties).assertSuccess();
    return {
        DataAccessRoleArn: cdk.stringToCloudFormation(properties.dataAccessRoleArn),
        DataLakeS3Uri: cdk.stringToCloudFormation(properties.dataLakeS3Uri),
        FlywheelName: cdk.stringToCloudFormation(properties.flywheelName),
        ActiveModelArn: cdk.stringToCloudFormation(properties.activeModelArn),
        DataSecurityConfig: cfnFlywheelDataSecurityConfigPropertyToCloudFormation(properties.dataSecurityConfig),
        ModelType: cdk.stringToCloudFormation(properties.modelType),
        Tags: cdk.listMapper(cdk.cfnTagToCloudFormation)(properties.tags),
        TaskConfig: cfnFlywheelTaskConfigPropertyToCloudFormation(properties.taskConfig),
    };
}
// @ts-ignore TS6133
function CfnFlywheelPropsFromCloudFormation(properties) {
    properties = properties == null ? {} : properties;
    if (typeof properties !== 'object') {
        return new cfn_parse.FromCloudFormationResult(properties);
    }
    const ret = new cfn_parse.FromCloudFormationPropertyObject();
    ret.addPropertyResult('dataAccessRoleArn', 'DataAccessRoleArn', cfn_parse.FromCloudFormation.getString(properties.DataAccessRoleArn));
    ret.addPropertyResult('dataLakeS3Uri', 'DataLakeS3Uri', cfn_parse.FromCloudFormation.getString(properties.DataLakeS3Uri));
    ret.addPropertyResult('flywheelName', 'FlywheelName', cfn_parse.FromCloudFormation.getString(properties.FlywheelName));
    ret.addPropertyResult('activeModelArn', 'ActiveModelArn', properties.ActiveModelArn != null ? cfn_parse.FromCloudFormation.getString(properties.ActiveModelArn) : undefined);
    ret.addPropertyResult('dataSecurityConfig', 'DataSecurityConfig', properties.DataSecurityConfig != null ? CfnFlywheelDataSecurityConfigPropertyFromCloudFormation(properties.DataSecurityConfig) : undefined);
    ret.addPropertyResult('modelType', 'ModelType', properties.ModelType != null ? cfn_parse.FromCloudFormation.getString(properties.ModelType) : undefined);
    ret.addPropertyResult('tags', 'Tags', properties.Tags != null ? cfn_parse.FromCloudFormation.getArray(cfn_parse.FromCloudFormation.getCfnTag)(properties.Tags) : undefined);
    ret.addPropertyResult('taskConfig', 'TaskConfig', properties.TaskConfig != null ? CfnFlywheelTaskConfigPropertyFromCloudFormation(properties.TaskConfig) : undefined);
    ret.addUnrecognizedPropertiesAsExtra(properties);
    return ret;
}
/**
 * A CloudFormation `AWS::Comprehend::Flywheel`
 *
 * A flywheel is an AWS resource that orchestrates the ongoing training of a model for custom classification or custom entity recognition. You can create a flywheel to start with an existing trained model, or Comprehend can create and train a new model.
 *
 * When you create the flywheel, Comprehend creates a data lake in your account. The data lake holds the training data and test data for all versions of the model.
 *
 * To use a flywheel with an existing trained model, you specify the active model version. Comprehend copies the model's training data and test data into the flywheel's data lake.
 *
 * To use the flywheel with a new model, you need to provide a dataset for training data (and optional test data) when you create the flywheel.
 *
 * For more information about flywheels, see [Flywheel overview](https://docs.aws.amazon.com/comprehend/latest/dg/flywheels-about.html) in the *Amazon Comprehend Developer Guide* .
 *
 * @cloudformationResource AWS::Comprehend::Flywheel
 * @stability external
 *
 * @link http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-comprehend-flywheel.html
 */
class CfnFlywheel extends cdk.CfnResource {
    /**
     * A factory method that creates a new instance of this class from an object
     * containing the CloudFormation properties of this resource.
     * Used in the @aws-cdk/cloudformation-include module.
     *
     * @internal
     */
    static _fromCloudFormation(scope, id, resourceAttributes, options) {
        resourceAttributes = resourceAttributes || {};
        const resourceProperties = options.parser.parseValue(resourceAttributes.Properties);
        const propsResult = CfnFlywheelPropsFromCloudFormation(resourceProperties);
        const ret = new CfnFlywheel(scope, id, propsResult.value);
        for (const [propKey, propVal] of Object.entries(propsResult.extraProperties)) {
            ret.addPropertyOverride(propKey, propVal);
        }
        options.parser.handleAttributes(ret, resourceAttributes, id);
        return ret;
    }
    /**
     * Create a new `AWS::Comprehend::Flywheel`.
     *
     * @param scope - scope in which this resource is defined
     * @param id    - scoped id of the resource
     * @param props - resource properties
     */
    constructor(scope, id, props) {
        super(scope, id, { type: CfnFlywheel.CFN_RESOURCE_TYPE_NAME, properties: props });
        try {
            jsiiDeprecationWarnings.aws_cdk_lib_aws_comprehend_CfnFlywheelProps(props);
        }
        catch (error) {
            if (process.env.JSII_DEBUG !== "1" && error.name === "DeprecationError") {
                Error.captureStackTrace(error, CfnFlywheel);
            }
            throw error;
        }
        cdk.requireProperty(props, 'dataAccessRoleArn', this);
        cdk.requireProperty(props, 'dataLakeS3Uri', this);
        cdk.requireProperty(props, 'flywheelName', this);
        this.attrArn = cdk.Token.asString(this.getAtt('Arn', cdk.ResolutionTypeHint.STRING));
        this.dataAccessRoleArn = props.dataAccessRoleArn;
        this.dataLakeS3Uri = props.dataLakeS3Uri;
        this.flywheelName = props.flywheelName;
        this.activeModelArn = props.activeModelArn;
        this.dataSecurityConfig = props.dataSecurityConfig;
        this.modelType = props.modelType;
        this.tags = new cdk.TagManager(cdk.TagType.STANDARD, "AWS::Comprehend::Flywheel", props.tags, { tagPropertyName: 'tags' });
        this.taskConfig = props.taskConfig;
    }
    /**
     * Examines the CloudFormation resource and discloses attributes.
     *
     * @param inspector - tree inspector to collect and process attributes
     *
     */
    inspect(inspector) {
        try {
            jsiiDeprecationWarnings.aws_cdk_lib_TreeInspector(inspector);
        }
        catch (error) {
            if (process.env.JSII_DEBUG !== "1" && error.name === "DeprecationError") {
                Error.captureStackTrace(error, this.inspect);
            }
            throw error;
        }
        inspector.addAttribute("aws:cdk:cloudformation:type", CfnFlywheel.CFN_RESOURCE_TYPE_NAME);
        inspector.addAttribute("aws:cdk:cloudformation:props", this.cfnProperties);
    }
    get cfnProperties() {
        return {
            dataAccessRoleArn: this.dataAccessRoleArn,
            dataLakeS3Uri: this.dataLakeS3Uri,
            flywheelName: this.flywheelName,
            activeModelArn: this.activeModelArn,
            dataSecurityConfig: this.dataSecurityConfig,
            modelType: this.modelType,
            tags: this.tags.renderTags(),
            taskConfig: this.taskConfig,
        };
    }
    renderProperties(props) {
        return cfnFlywheelPropsToCloudFormation(props);
    }
}
_a = JSII_RTTI_SYMBOL_1;
CfnFlywheel[_a] = { fqn: "aws-cdk-lib.aws_comprehend.CfnFlywheel", version: "2.77.0" };
/**
 * The CloudFormation resource type name for this resource class.
 */
CfnFlywheel.CFN_RESOURCE_TYPE_NAME = "AWS::Comprehend::Flywheel";
exports.CfnFlywheel = CfnFlywheel;
/**
 * Determine whether the given properties match those of a `DataSecurityConfigProperty`
 *
 * @param properties - the TypeScript properties of a `DataSecurityConfigProperty`
 *
 * @returns the result of the validation.
 */
function CfnFlywheel_DataSecurityConfigPropertyValidator(properties) {
    if (!cdk.canInspect(properties)) {
        return cdk.VALIDATION_SUCCESS;
    }
    const errors = new cdk.ValidationResults();
    if (typeof properties !== 'object') {
        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));
    }
    errors.collect(cdk.propertyValidator('dataLakeKmsKeyId', cdk.validateString)(properties.dataLakeKmsKeyId));
    errors.collect(cdk.propertyValidator('modelKmsKeyId', cdk.validateString)(properties.modelKmsKeyId));
    errors.collect(cdk.propertyValidator('volumeKmsKeyId', cdk.validateString)(properties.volumeKmsKeyId));
    errors.collect(cdk.propertyValidator('vpcConfig', CfnFlywheel_VpcConfigPropertyValidator)(properties.vpcConfig));
    return errors.wrap('supplied properties not correct for "DataSecurityConfigProperty"');
}
/**
 * Renders the AWS CloudFormation properties of an `AWS::Comprehend::Flywheel.DataSecurityConfig` resource
 *
 * @param properties - the TypeScript properties of a `DataSecurityConfigProperty`
 *
 * @returns the AWS CloudFormation properties of an `AWS::Comprehend::Flywheel.DataSecurityConfig` resource.
 */
// @ts-ignore TS6133
function cfnFlywheelDataSecurityConfigPropertyToCloudFormation(properties) {
    if (!cdk.canInspect(properties)) {
        return properties;
    }
    CfnFlywheel_DataSecurityConfigPropertyValidator(properties).assertSuccess();
    return {
        DataLakeKmsKeyId: cdk.stringToCloudFormation(properties.dataLakeKmsKeyId),
        ModelKmsKeyId: cdk.stringToCloudFormation(properties.modelKmsKeyId),
        VolumeKmsKeyId: cdk.stringToCloudFormation(properties.volumeKmsKeyId),
        VpcConfig: cfnFlywheelVpcConfigPropertyToCloudFormation(properties.vpcConfig),
    };
}
// @ts-ignore TS6133
function CfnFlywheelDataSecurityConfigPropertyFromCloudFormation(properties) {
    if (cdk.isResolvableObject(properties)) {
        return new cfn_parse.FromCloudFormationResult(properties);
    }
    properties = properties == null ? {} : properties;
    if (typeof properties !== 'object') {
        return new cfn_parse.FromCloudFormationResult(properties);
    }
    const ret = new cfn_parse.FromCloudFormationPropertyObject();
    ret.addPropertyResult('dataLakeKmsKeyId', 'DataLakeKmsKeyId', properties.DataLakeKmsKeyId != null ? cfn_parse.FromCloudFormation.getString(properties.DataLakeKmsKeyId) : undefined);
    ret.addPropertyResult('modelKmsKeyId', 'ModelKmsKeyId', properties.ModelKmsKeyId != null ? cfn_parse.FromCloudFormation.getString(properties.ModelKmsKeyId) : undefined);
    ret.addPropertyResult('volumeKmsKeyId', 'VolumeKmsKeyId', properties.VolumeKmsKeyId != null ? cfn_parse.FromCloudFormation.getString(properties.VolumeKmsKeyId) : undefined);
    ret.addPropertyResult('vpcConfig', 'VpcConfig', properties.VpcConfig != null ? CfnFlywheelVpcConfigPropertyFromCloudFormation(properties.VpcConfig) : undefined);
    ret.addUnrecognizedPropertiesAsExtra(properties);
    return ret;
}
/**
 * Determine whether the given properties match those of a `DocumentClassificationConfigProperty`
 *
 * @param properties - the TypeScript properties of a `DocumentClassificationConfigProperty`
 *
 * @returns the result of the validation.
 */
function CfnFlywheel_DocumentClassificationConfigPropertyValidator(properties) {
    if (!cdk.canInspect(properties)) {
        return cdk.VALIDATION_SUCCESS;
    }
    const errors = new cdk.ValidationResults();
    if (typeof properties !== 'object') {
        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));
    }
    errors.collect(cdk.propertyValidator('labels', cdk.listValidator(cdk.validateString))(properties.labels));
    errors.collect(cdk.propertyValidator('mode', cdk.requiredValidator)(properties.mode));
    errors.collect(cdk.propertyValidator('mode', cdk.validateString)(properties.mode));
    return errors.wrap('supplied properties not correct for "DocumentClassificationConfigProperty"');
}
/**
 * Renders the AWS CloudFormation properties of an `AWS::Comprehend::Flywheel.DocumentClassificationConfig` resource
 *
 * @param properties - the TypeScript properties of a `DocumentClassificationConfigProperty`
 *
 * @returns the AWS CloudFormation properties of an `AWS::Comprehend::Flywheel.DocumentClassificationConfig` resource.
 */
// @ts-ignore TS6133
function cfnFlywheelDocumentClassificationConfigPropertyToCloudFormation(properties) {
    if (!cdk.canInspect(properties)) {
        return properties;
    }
    CfnFlywheel_DocumentClassificationConfigPropertyValidator(properties).assertSuccess();
    return {
        Labels: cdk.listMapper(cdk.stringToCloudFormation)(properties.labels),
        Mode: cdk.stringToCloudFormation(properties.mode),
    };
}
// @ts-ignore TS6133
function CfnFlywheelDocumentClassificationConfigPropertyFromCloudFormation(properties) {
    if (cdk.isResolvableObject(properties)) {
        return new cfn_parse.FromCloudFormationResult(properties);
    }
    properties = properties == null ? {} : properties;
    if (typeof properties !== 'object') {
        return new cfn_parse.FromCloudFormationResult(properties);
    }
    const ret = new cfn_parse.FromCloudFormationPropertyObject();
    ret.addPropertyResult('labels', 'Labels', properties.Labels != null ? cfn_parse.FromCloudFormation.getStringArray(properties.Labels) : undefined);
    ret.addPropertyResult('mode', 'Mode', cfn_parse.FromCloudFormation.getString(properties.Mode));
    ret.addUnrecognizedPropertiesAsExtra(properties);
    return ret;
}
/**
 * Determine whether the given properties match those of a `EntityRecognitionConfigProperty`
 *
 * @param properties - the TypeScript properties of a `EntityRecognitionConfigProperty`
 *
 * @returns the result of the validation.
 */
function CfnFlywheel_EntityRecognitionConfigPropertyValidator(properties) {
    if (!cdk.canInspect(properties)) {
        return cdk.VALIDATION_SUCCESS;
    }
    const errors = new cdk.ValidationResults();
    if (typeof properties !== 'object') {
        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));
    }
    errors.collect(cdk.propertyValidator('entityTypes', cdk.listValidator(CfnFlywheel_EntityTypesListItemPropertyValidator))(properties.entityTypes));
    return errors.wrap('supplied properties not correct for "EntityRecognitionConfigProperty"');
}
/**
 * Renders the AWS CloudFormation properties of an `AWS::Comprehend::Flywheel.EntityRecognitionConfig` resource
 *
 * @param properties - the TypeScript properties of a `EntityRecognitionConfigProperty`
 *
 * @returns the AWS CloudFormation properties of an `AWS::Comprehend::Flywheel.EntityRecognitionConfig` resource.
 */
// @ts-ignore TS6133
function cfnFlywheelEntityRecognitionConfigPropertyToCloudFormation(properties) {
    if (!cdk.canInspect(properties)) {
        return properties;
    }
    CfnFlywheel_EntityRecognitionConfigPropertyValidator(properties).assertSuccess();
    return {
        EntityTypes: cdk.listMapper(cfnFlywheelEntityTypesListItemPropertyToCloudFormation)(properties.entityTypes),
    };
}
// @ts-ignore TS6133
function CfnFlywheelEntityRecognitionConfigPropertyFromCloudFormation(properties) {
    if (cdk.isResolvableObject(properties)) {
        return new cfn_parse.FromCloudFormationResult(properties);
    }
    properties = properties == null ? {} : properties;
    if (typeof properties !== 'object') {
        return new cfn_parse.FromCloudFormationResult(properties);
    }
    const ret = new cfn_parse.FromCloudFormationPropertyObject();
    ret.addPropertyResult('entityTypes', 'EntityTypes', properties.EntityTypes != null ? cfn_parse.FromCloudFormation.getArray(CfnFlywheelEntityTypesListItemPropertyFromCloudFormation)(properties.EntityTypes) : undefined);
    ret.addUnrecognizedPropertiesAsExtra(properties);
    return ret;
}
/**
 * Determine whether the given properties match those of a `EntityTypesListItemProperty`
 *
 * @param properties - the TypeScript properties of a `EntityTypesListItemProperty`
 *
 * @returns the result of the validation.
 */
function CfnFlywheel_EntityTypesListItemPropertyValidator(properties) {
    if (!cdk.canInspect(properties)) {
        return cdk.VALIDATION_SUCCESS;
    }
    const errors = new cdk.ValidationResults();
    if (typeof properties !== 'object') {
        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));
    }
    errors.collect(cdk.propertyValidator('type', cdk.requiredValidator)(properties.type));
    errors.collect(cdk.propertyValidator('type', cdk.validateString)(properties.type));
    return errors.wrap('supplied properties not correct for "EntityTypesListItemProperty"');
}
/**
 * Renders the AWS CloudFormation properties of an `AWS::Comprehend::Flywheel.EntityTypesListItem` resource
 *
 * @param properties - the TypeScript properties of a `EntityTypesListItemProperty`
 *
 * @returns the AWS CloudFormation properties of an `AWS::Comprehend::Flywheel.EntityTypesListItem` resource.
 */
// @ts-ignore TS6133
function cfnFlywheelEntityTypesListItemPropertyToCloudFormation(properties) {
    if (!cdk.canInspect(properties)) {
        return properties;
    }
    CfnFlywheel_EntityTypesListItemPropertyValidator(properties).assertSuccess();
    return {
        Type: cdk.stringToCloudFormation(properties.type),
    };
}
// @ts-ignore TS6133
function CfnFlywheelEntityTypesListItemPropertyFromCloudFormation(properties) {
    if (cdk.isResolvableObject(properties)) {
        return new cfn_parse.FromCloudFormationResult(properties);
    }
    properties = properties == null ? {} : properties;
    if (typeof properties !== 'object') {
        return new cfn_parse.FromCloudFormationResult(properties);
    }
    const ret = new cfn_parse.FromCloudFormationPropertyObject();
    ret.addPropertyResult('type', 'Type', cfn_parse.FromCloudFormation.getString(properties.Type));
    ret.addUnrecognizedPropertiesAsExtra(properties);
    return ret;
}
/**
 * Determine whether the given properties match those of a `TaskConfigProperty`
 *
 * @param properties - the TypeScript properties of a `TaskConfigProperty`
 *
 * @returns the result of the validation.
 */
function CfnFlywheel_TaskConfigPropertyValidator(properties) {
    if (!cdk.canInspect(properties)) {
        return cdk.VALIDATION_SUCCESS;
    }
    const errors = new cdk.ValidationResults();
    if (typeof properties !== 'object') {
        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));
    }
    errors.collect(cdk.propertyValidator('documentClassificationConfig', CfnFlywheel_DocumentClassificationConfigPropertyValidator)(properties.documentClassificationConfig));
    errors.collect(cdk.propertyValidator('entityRecognitionConfig', CfnFlywheel_EntityRecognitionConfigPropertyValidator)(properties.entityRecognitionConfig));
    errors.collect(cdk.propertyValidator('languageCode', cdk.requiredValidator)(properties.languageCode));
    errors.collect(cdk.propertyValidator('languageCode', cdk.validateString)(properties.languageCode));
    return errors.wrap('supplied properties not correct for "TaskConfigProperty"');
}
/**
 * Renders the AWS CloudFormation properties of an `AWS::Comprehend::Flywheel.TaskConfig` resource
 *
 * @param properties - the TypeScript properties of a `TaskConfigProperty`
 *
 * @returns the AWS CloudFormation properties of an `AWS::Comprehend::Flywheel.TaskConfig` resource.
 */
// @ts-ignore TS6133
function cfnFlywheelTaskConfigPropertyToCloudFormation(properties) {
    if (!cdk.canInspect(properties)) {
        return properties;
    }
    CfnFlywheel_TaskConfigPropertyValidator(properties).assertSuccess();
    return {
        DocumentClassificationConfig: cfnFlywheelDocumentClassificationConfigPropertyToCloudFormation(properties.documentClassificationConfig),
        EntityRecognitionConfig: cfnFlywheelEntityRecognitionConfigPropertyToCloudFormation(properties.entityRecognitionConfig),
        LanguageCode: cdk.stringToCloudFormation(properties.languageCode),
    };
}
// @ts-ignore TS6133
function CfnFlywheelTaskConfigPropertyFromCloudFormation(properties) {
    if (cdk.isResolvableObject(properties)) {
        return new cfn_parse.FromCloudFormationResult(properties);
    }
    properties = properties == null ? {} : properties;
    if (typeof properties !== 'object') {
        return new cfn_parse.FromCloudFormationResult(properties);
    }
    const ret = new cfn_parse.FromCloudFormationPropertyObject();
    ret.addPropertyResult('documentClassificationConfig', 'DocumentClassificationConfig', properties.DocumentClassificationConfig != null ? CfnFlywheelDocumentClassificationConfigPropertyFromCloudFormation(properties.DocumentClassificationConfig) : undefined);
    ret.addPropertyResult('entityRecognitionConfig', 'EntityRecognitionConfig', properties.EntityRecognitionConfig != null ? CfnFlywheelEntityRecognitionConfigPropertyFromCloudFormation(properties.EntityRecognitionConfig) : undefined);
    ret.addPropertyResult('languageCode', 'LanguageCode', cfn_parse.FromCloudFormation.getString(properties.LanguageCode));
    ret.addUnrecognizedPropertiesAsExtra(properties);
    return ret;
}
/**
 * Determine whether the given properties match those of a `VpcConfigProperty`
 *
 * @param properties - the TypeScript properties of a `VpcConfigProperty`
 *
 * @returns the result of the validation.
 */
function CfnFlywheel_VpcConfigPropertyValidator(properties) {
    if (!cdk.canInspect(properties)) {
        return cdk.VALIDATION_SUCCESS;
    }
    const errors = new cdk.ValidationResults();
    if (typeof properties !== 'object') {
        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));
    }
    errors.collect(cdk.propertyValidator('securityGroupIds', cdk.requiredValidator)(properties.securityGroupIds));
    errors.collect(cdk.propertyValidator('securityGroupIds', cdk.listValidator(cdk.validateString))(properties.securityGroupIds));
    errors.collect(cdk.propertyValidator('subnets', cdk.requiredValidator)(properties.subnets));
    errors.collect(cdk.propertyValidator('subnets', cdk.listValidator(cdk.validateString))(properties.subnets));
    return errors.wrap('supplied properties not correct for "VpcConfigProperty"');
}
/**
 * Renders the AWS CloudFormation properties of an `AWS::Comprehend::Flywheel.VpcConfig` resource
 *
 * @param properties - the TypeScript properties of a `VpcConfigProperty`
 *
 * @returns the AWS CloudFormation properties of an `AWS::Comprehend::Flywheel.VpcConfig` resource.
 */
// @ts-ignore TS6133
function cfnFlywheelVpcConfigPropertyToCloudFormation(properties) {
    if (!cdk.canInspect(properties)) {
        return properties;
    }
    CfnFlywheel_VpcConfigPropertyValidator(properties).assertSuccess();
    return {
        SecurityGroupIds: cdk.listMapper(cdk.stringToCloudFormation)(properties.securityGroupIds),
        Subnets: cdk.listMapper(cdk.stringToCloudFormation)(properties.subnets),
    };
}
// @ts-ignore TS6133
function CfnFlywheelVpcConfigPropertyFromCloudFormation(properties) {
    if (cdk.isResolvableObject(properties)) {
        return new cfn_parse.FromCloudFormationResult(properties);
    }
    properties = properties == null ? {} : properties;
    if (typeof properties !== 'object') {
        return new cfn_parse.FromCloudFormationResult(properties);
    }
    const ret = new cfn_parse.FromCloudFormationPropertyObject();
    ret.addPropertyResult('securityGroupIds', 'SecurityGroupIds', cfn_parse.FromCloudFormation.getStringArray(properties.SecurityGroupIds));
    ret.addPropertyResult('subnets', 'Subnets', cfn_parse.FromCloudFormation.getStringArray(properties.Subnets));
    ret.addUnrecognizedPropertiesAsExtra(properties);
    return ret;
}
//# sourceMappingURL=data:application/json;base64,