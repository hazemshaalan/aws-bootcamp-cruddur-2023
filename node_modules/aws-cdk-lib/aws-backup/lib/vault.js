"use strict";
var _a;
Object.defineProperty(exports, "__esModule", { value: true });
exports.BackupVault = exports.BackupVaultEvents = void 0;
const jsiiDeprecationWarnings = require("../../.warnings.jsii.js");
const JSII_RTTI_SYMBOL_1 = Symbol.for("jsii.rtti");
const iam = require("../../aws-iam");
const core_1 = require("../../core");
const backup_generated_1 = require("./backup.generated");
/**
 * Backup vault events. Some events are no longer supported and will not return
 * statuses or notifications.
 *
 * @see https://docs.aws.amazon.com/aws-backup/latest/devguide/API_PutBackupVaultNotifications.html#API_PutBackupVaultNotifications_RequestBody
 */
var BackupVaultEvents;
(function (BackupVaultEvents) {
    /** BACKUP_JOB_STARTED */
    BackupVaultEvents["BACKUP_JOB_STARTED"] = "BACKUP_JOB_STARTED";
    /** BACKUP_JOB_COMPLETED */
    BackupVaultEvents["BACKUP_JOB_COMPLETED"] = "BACKUP_JOB_COMPLETED";
    /** BACKUP_JOB_SUCCESSFUL */
    BackupVaultEvents["BACKUP_JOB_SUCCESSFUL"] = "BACKUP_JOB_SUCCESSFUL";
    /** BACKUP_JOB_FAILED */
    BackupVaultEvents["BACKUP_JOB_FAILED"] = "BACKUP_JOB_FAILED";
    /** BACKUP_JOB_EXPIRED */
    BackupVaultEvents["BACKUP_JOB_EXPIRED"] = "BACKUP_JOB_EXPIRED";
    /** RESTORE_JOB_STARTED */
    BackupVaultEvents["RESTORE_JOB_STARTED"] = "RESTORE_JOB_STARTED";
    /** RESTORE_JOB_COMPLETED */
    BackupVaultEvents["RESTORE_JOB_COMPLETED"] = "RESTORE_JOB_COMPLETED";
    /** RESTORE_JOB_SUCCESSFUL */
    BackupVaultEvents["RESTORE_JOB_SUCCESSFUL"] = "RESTORE_JOB_SUCCESSFUL";
    /** RESTORE_JOB_FAILED */
    BackupVaultEvents["RESTORE_JOB_FAILED"] = "RESTORE_JOB_FAILED";
    /** COPY_JOB_STARTED */
    BackupVaultEvents["COPY_JOB_STARTED"] = "COPY_JOB_STARTED";
    /** COPY_JOB_SUCCESSFUL */
    BackupVaultEvents["COPY_JOB_SUCCESSFUL"] = "COPY_JOB_SUCCESSFUL";
    /** COPY_JOB_FAILED */
    BackupVaultEvents["COPY_JOB_FAILED"] = "COPY_JOB_FAILED";
    /** RECOVERY_POINT_MODIFIED */
    BackupVaultEvents["RECOVERY_POINT_MODIFIED"] = "RECOVERY_POINT_MODIFIED";
    /** BACKUP_PLAN_CREATED */
    BackupVaultEvents["BACKUP_PLAN_CREATED"] = "BACKUP_PLAN_CREATED";
    /** BACKUP_PLAN_MODIFIED */
    BackupVaultEvents["BACKUP_PLAN_MODIFIED"] = "BACKUP_PLAN_MODIFIED";
    /** S3_BACKUP_OBJECT_FAILED */
    BackupVaultEvents["S3_BACKUP_OBJECT_FAILED"] = "S3_BACKUP_OBJECT_FAILED";
    /** BACKUP_PLAN_MODIFIED */
    BackupVaultEvents["S3_RESTORE_OBJECT_FAILED"] = "S3_RESTORE_OBJECT_FAILED";
})(BackupVaultEvents = exports.BackupVaultEvents || (exports.BackupVaultEvents = {}));
class BackupVaultBase extends core_1.Resource {
    /**
     * Grant the actions defined in actions to the given grantee
     * on this Backup Vault resource.
     *
     * @param grantee Principal to grant right to
     * @param actions The actions to grant
     */
    grant(grantee, ...actions) {
        for (const action of actions) {
            if (action.indexOf('*') >= 0) {
                throw new Error("AWS Backup access policies don't support a wildcard in the Action key.");
            }
        }
        return iam.Grant.addToPrincipal({
            grantee: grantee,
            actions: actions,
            resourceArns: [this.backupVaultArn],
        });
    }
}
/**
 * A backup vault
 */
class BackupVault extends BackupVaultBase {
    /**
     * Import an existing backup vault by name
     */
    static fromBackupVaultName(scope, id, backupVaultName) {
        const backupVaultArn = core_1.Stack.of(scope).formatArn({
            service: 'backup',
            resource: 'backup-vault',
            resourceName: backupVaultName,
            arnFormat: core_1.ArnFormat.COLON_RESOURCE_NAME,
        });
        return BackupVault.fromBackupVaultArn(scope, id, backupVaultArn);
    }
    /**
     * Import an existing backup vault by arn
     */
    static fromBackupVaultArn(scope, id, backupVaultArn) {
        const parsedArn = core_1.Stack.of(scope).splitArn(backupVaultArn, core_1.ArnFormat.COLON_RESOURCE_NAME);
        if (parsedArn.arnFormat !== core_1.ArnFormat.COLON_RESOURCE_NAME) {
            throw new Error(`Backup Vault Arn ${backupVaultArn} has the wrong format, expected ${core_1.ArnFormat.COLON_RESOURCE_NAME}.`);
        }
        if (!parsedArn.resourceName) {
            throw new Error(`Backup Vault Arn ${backupVaultArn} does not have a resource name.`);
        }
        class Import extends BackupVaultBase {
            constructor() {
                super(...arguments);
                this.backupVaultName = parsedArn.resourceName;
                this.backupVaultArn = backupVaultArn;
            }
        }
        return new Import(scope, id, {
            account: parsedArn.account,
            region: parsedArn.region,
        });
    }
    constructor(scope, id, props = {}) {
        super(scope, id);
        try {
            jsiiDeprecationWarnings.aws_cdk_lib_aws_backup_BackupVaultProps(props);
        }
        catch (error) {
            if (process.env.JSII_DEBUG !== "1" && error.name === "DeprecationError") {
                Error.captureStackTrace(error, BackupVault);
            }
            throw error;
        }
        if (props.backupVaultName && !/^[a-zA-Z0-9\-_]{2,50}$/.test(props.backupVaultName)) {
            throw new Error('Expected vault name to match pattern `^[a-zA-Z0-9\-_]{2,50}$`');
        }
        let notifications;
        if (props.notificationTopic) {
            notifications = {
                backupVaultEvents: props.notificationEvents || Object.values(BackupVaultEvents),
                snsTopicArn: props.notificationTopic.topicArn,
            };
            props.notificationTopic.grantPublish(new iam.ServicePrincipal('backup.amazonaws.com'));
        }
        this.accessPolicy = props.accessPolicy ?? new iam.PolicyDocument();
        if (props.blockRecoveryPointDeletion) {
            this.blockRecoveryPointDeletion();
        }
        const vault = new backup_generated_1.CfnBackupVault(this, 'Resource', {
            backupVaultName: props.backupVaultName || this.uniqueVaultName(),
            accessPolicy: core_1.Lazy.any({ produce: () => this.accessPolicy.toJSON() }),
            encryptionKeyArn: props.encryptionKey && props.encryptionKey.keyArn,
            notifications,
            lockConfiguration: renderLockConfiguration(props.lockConfiguration),
        });
        vault.applyRemovalPolicy(props.removalPolicy);
        this.backupVaultName = vault.attrBackupVaultName;
        this.backupVaultArn = vault.attrBackupVaultArn;
    }
    /**
     * Adds a statement to the vault access policy
     */
    addToAccessPolicy(statement) {
        try {
            jsiiDeprecationWarnings.aws_cdk_lib_aws_iam_PolicyStatement(statement);
        }
        catch (error) {
            if (process.env.JSII_DEBUG !== "1" && error.name === "DeprecationError") {
                Error.captureStackTrace(error, this.addToAccessPolicy);
            }
            throw error;
        }
        this.accessPolicy.addStatements(statement);
    }
    /**
     * Adds a statement to the vault access policy that prevents anyone
     * from deleting a recovery point.
     */
    blockRecoveryPointDeletion() {
        this.addToAccessPolicy(new iam.PolicyStatement({
            effect: iam.Effect.DENY,
            actions: [
                'backup:DeleteRecoveryPoint',
                'backup:UpdateRecoveryPointLifecycle',
            ],
            principals: [new iam.AnyPrincipal()],
            resources: ['*'],
        }));
    }
    uniqueVaultName() {
        // Max length of 50 chars, get the last 50 chars
        const id = core_1.Names.uniqueId(this);
        return id.substring(Math.max(id.length - 50, 0), id.length);
    }
}
_a = JSII_RTTI_SYMBOL_1;
BackupVault[_a] = { fqn: "aws-cdk-lib.aws_backup.BackupVault", version: "2.77.0" };
exports.BackupVault = BackupVault;
function renderLockConfiguration(config) {
    if (!config) {
        return undefined;
    }
    if (config.changeableFor && config.changeableFor.toHours() < 72) {
        throw new Error(`AWS Backup enforces a 72-hour cooling-off period before Vault Lock takes effect and becomes immutable, got ${config.changeableFor.toHours()} hours`);
    }
    if (config.maxRetention) {
        if (config.maxRetention.toDays() > 36500) {
            throw new Error(`The longest maximum retention period you can specify is 36500 days, got ${config.maxRetention.toDays()} days`);
        }
        if (config.maxRetention.toDays() <= config.minRetention.toDays()) {
            throw new Error(`The maximum retention period (${config.maxRetention.toDays()} days) must be greater than the minimum retention period (${config.minRetention.toDays()} days)`);
        }
    }
    if (config.minRetention.toHours() < 24) {
        throw new Error(`The shortest minimum retention period you can specify is 1 day, got ${config.minRetention.toHours()} hours`);
    }
    return {
        minRetentionDays: config.minRetention.toDays(),
        maxRetentionDays: config.maxRetention?.toDays(),
        changeableForDays: config.changeableFor?.toDays(),
    };
}
//# sourceMappingURL=data:application/json;base64,