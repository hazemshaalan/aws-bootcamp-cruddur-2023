"use strict";
var _a;
Object.defineProperty(exports, "__esModule", { value: true });
exports.AuthenticateCognitoAction = void 0;
const jsiiDeprecationWarnings = require("../../.warnings.jsii.js");
const JSII_RTTI_SYMBOL_1 = Symbol.for("jsii.rtti");
const elbv2 = require("../../aws-elasticloadbalancingv2");
/**
 * A Listener Action to authenticate with Cognito
 */
class AuthenticateCognitoAction extends elbv2.ListenerAction {
    static config(options) {
        return {
            userPoolArn: options.userPool.userPoolArn,
            userPoolClientId: options.userPoolClient.userPoolClientId,
            userPoolDomain: options.userPoolDomain.domainName,
            authenticationRequestExtraParams: options.authenticationRequestExtraParams,
            onUnauthenticatedRequest: options.onUnauthenticatedRequest,
            scope: options.scope,
            sessionCookieName: options.sessionCookieName,
            sessionTimeout: options.sessionTimeout?.toSeconds().toString(),
        };
    }
    /**
     * Authenticate using an identity provide (IdP) that is compliant with OpenID Connect (OIDC)
     */
    constructor(options) {
        super({
            type: 'authenticate-cognito',
            authenticateCognitoConfig: AuthenticateCognitoAction.config(options),
        }, options.next);
        try {
            jsiiDeprecationWarnings.aws_cdk_lib_aws_elasticloadbalancingv2_actions_AuthenticateCognitoActionProps(options);
        }
        catch (error) {
            if (process.env.JSII_DEBUG !== "1" && error.name === "DeprecationError") {
                Error.captureStackTrace(error, AuthenticateCognitoAction);
            }
            throw error;
        }
        this.addRuleAction({
            type: 'authenticate-cognito',
            authenticateCognitoConfig: {
                ...AuthenticateCognitoAction.config(options),
                sessionTimeout: options.sessionTimeout?.toSeconds(),
            },
        });
    }
}
_a = JSII_RTTI_SYMBOL_1;
AuthenticateCognitoAction[_a] = { fqn: "aws-cdk-lib.aws_elasticloadbalancingv2_actions.AuthenticateCognitoAction", version: "2.77.0" };
exports.AuthenticateCognitoAction = AuthenticateCognitoAction;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29nbml0by1hY3Rpb24uanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJjb2duaXRvLWFjdGlvbi50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7QUFDQSwwREFBMEQ7QUFvRTFEOztHQUVHO0FBQ0gsTUFBYSx5QkFBMEIsU0FBUSxLQUFLLENBQUMsY0FBYztJQUV6RCxNQUFNLENBQUMsTUFBTSxDQUFDLE9BQXVDO1FBQzNELE9BQU87WUFDTCxXQUFXLEVBQUUsT0FBTyxDQUFDLFFBQVEsQ0FBQyxXQUFXO1lBQ3pDLGdCQUFnQixFQUFFLE9BQU8sQ0FBQyxjQUFjLENBQUMsZ0JBQWdCO1lBQ3pELGNBQWMsRUFBRSxPQUFPLENBQUMsY0FBYyxDQUFDLFVBQVU7WUFDakQsZ0NBQWdDLEVBQUUsT0FBTyxDQUFDLGdDQUFnQztZQUMxRSx3QkFBd0IsRUFBRSxPQUFPLENBQUMsd0JBQXdCO1lBQzFELEtBQUssRUFBRSxPQUFPLENBQUMsS0FBSztZQUNwQixpQkFBaUIsRUFBRSxPQUFPLENBQUMsaUJBQWlCO1lBQzVDLGNBQWMsRUFBRSxPQUFPLENBQUMsY0FBYyxFQUFFLFNBQVMsRUFBRSxDQUFDLFFBQVEsRUFBRTtTQUMvRCxDQUFDO0tBQ0g7SUFFRDs7T0FFRztJQUNILFlBQVksT0FBdUM7UUFDakQsS0FBSyxDQUFDO1lBQ0osSUFBSSxFQUFFLHNCQUFzQjtZQUM1Qix5QkFBeUIsRUFBRSx5QkFBeUIsQ0FBQyxNQUFNLENBQUMsT0FBTyxDQUFDO1NBQ3JFLEVBQUUsT0FBTyxDQUFDLElBQUksQ0FBQyxDQUFDOzs7Ozs7K0NBdEJSLHlCQUF5Qjs7OztRQXVCbEMsSUFBSSxDQUFDLGFBQWEsQ0FBQztZQUNqQixJQUFJLEVBQUUsc0JBQXNCO1lBQzVCLHlCQUF5QixFQUFFO2dCQUN6QixHQUFHLHlCQUF5QixDQUFDLE1BQU0sQ0FBQyxPQUFPLENBQUM7Z0JBQzVDLGNBQWMsRUFBRSxPQUFPLENBQUMsY0FBYyxFQUFFLFNBQVMsRUFBRTthQUNwRDtTQUNGLENBQUMsQ0FBQztLQUNKOzs7O0FBOUJVLDhEQUF5QiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCAqIGFzIGNvZ25pdG8gZnJvbSAnLi4vLi4vYXdzLWNvZ25pdG8nO1xuaW1wb3J0ICogYXMgZWxidjIgZnJvbSAnLi4vLi4vYXdzLWVsYXN0aWNsb2FkYmFsYW5jaW5ndjInO1xuaW1wb3J0IHsgRHVyYXRpb24gfSBmcm9tICcuLi8uLi9jb3JlJztcblxuLyoqXG4gKiBQcm9wZXJ0aWVzIGZvciBBdXRoZW50aWNhdGVDb2duaXRvQWN0aW9uXG4gKi9cbmV4cG9ydCBpbnRlcmZhY2UgQXV0aGVudGljYXRlQ29nbml0b0FjdGlvblByb3BzIHtcbiAgLyoqXG4gICAqIFdoYXQgYWN0aW9uIHRvIGV4ZWN1dGUgbmV4dFxuICAgKlxuICAgKiBNdWx0aXBsZSBhY3Rpb25zIGZvcm0gYSBsaW5rZWQgY2hhaW47IHRoZSBjaGFpbiBtdXN0IGFsd2F5cyB0ZXJtaW5hdGUgaW4gYVxuICAgKiAod2VpZ2h0ZWQpZm9yd2FyZCwgZml4ZWRSZXNwb25zZSBvciByZWRpcmVjdCBhY3Rpb24uXG4gICAqL1xuICByZWFkb25seSBuZXh0OiBlbGJ2Mi5MaXN0ZW5lckFjdGlvbjtcblxuICAvKipcbiAgICogVGhlIEFtYXpvbiBDb2duaXRvIHVzZXIgcG9vbC5cbiAgICovXG4gIHJlYWRvbmx5IHVzZXJQb29sOiBjb2duaXRvLklVc2VyUG9vbDtcblxuICAvKipcbiAgICogVGhlIEFtYXpvbiBDb2duaXRvIHVzZXIgcG9vbCBjbGllbnQuXG4gICAqL1xuICByZWFkb25seSB1c2VyUG9vbENsaWVudDogY29nbml0by5JVXNlclBvb2xDbGllbnQ7XG5cbiAgLyoqXG4gICAqIFRoZSBkb21haW4gcHJlZml4IG9yIGZ1bGx5LXF1YWxpZmllZCBkb21haW4gbmFtZSBvZiB0aGUgQW1hem9uIENvZ25pdG8gdXNlciBwb29sLlxuICAgKi9cbiAgcmVhZG9ubHkgdXNlclBvb2xEb21haW46IGNvZ25pdG8uSVVzZXJQb29sRG9tYWluO1xuXG4gIC8qKlxuICAgKiBUaGUgcXVlcnkgcGFyYW1ldGVycyAodXAgdG8gMTApIHRvIGluY2x1ZGUgaW4gdGhlIHJlZGlyZWN0IHJlcXVlc3QgdG8gdGhlIGF1dGhvcml6YXRpb24gZW5kcG9pbnQuXG4gICAqXG4gICAqIEBkZWZhdWx0IC0gTm8gZXh0cmEgcGFyYW1ldGVyc1xuICAgKi9cbiAgcmVhZG9ubHkgYXV0aGVudGljYXRpb25SZXF1ZXN0RXh0cmFQYXJhbXM/OiBSZWNvcmQ8c3RyaW5nLCBzdHJpbmc+O1xuXG4gIC8qKlxuICAgKiBUaGUgYmVoYXZpb3IgaWYgdGhlIHVzZXIgaXMgbm90IGF1dGhlbnRpY2F0ZWQuXG4gICAqXG4gICAqIEBkZWZhdWx0IFVuYXV0aGVudGljYXRlZEFjdGlvbi5BVVRIRU5USUNBVEVcbiAgICovXG4gIHJlYWRvbmx5IG9uVW5hdXRoZW50aWNhdGVkUmVxdWVzdD86IGVsYnYyLlVuYXV0aGVudGljYXRlZEFjdGlvbjtcblxuICAvKipcbiAgICogVGhlIHNldCBvZiB1c2VyIGNsYWltcyB0byBiZSByZXF1ZXN0ZWQgZnJvbSB0aGUgSWRQLlxuICAgKlxuICAgKiBUbyB2ZXJpZnkgd2hpY2ggc2NvcGUgdmFsdWVzIHlvdXIgSWRQIHN1cHBvcnRzIGFuZCBob3cgdG8gc2VwYXJhdGUgbXVsdGlwbGUgdmFsdWVzLCBzZWUgdGhlIGRvY3VtZW50YXRpb24gZm9yIHlvdXIgSWRQLlxuICAgKlxuICAgKiBAZGVmYXVsdCBcIm9wZW5pZFwiXG4gICAqL1xuICByZWFkb25seSBzY29wZT86IHN0cmluZztcblxuICAvKipcbiAgICogVGhlIG5hbWUgb2YgdGhlIGNvb2tpZSB1c2VkIHRvIG1haW50YWluIHNlc3Npb24gaW5mb3JtYXRpb24uXG4gICAqXG4gICAqIEBkZWZhdWx0IFwiQVdTRUxCQXV0aFNlc3Npb25Db29raWVcIlxuICAgKi9cbiAgcmVhZG9ubHkgc2Vzc2lvbkNvb2tpZU5hbWU/OiBzdHJpbmc7XG5cbiAgLyoqXG4gICAqIFRoZSBtYXhpbXVtIGR1cmF0aW9uIG9mIHRoZSBhdXRoZW50aWNhdGlvbiBzZXNzaW9uLlxuICAgKlxuICAgKiBAZGVmYXVsdCBEdXJhdGlvbi5kYXlzKDcpXG4gICAqL1xuICByZWFkb25seSBzZXNzaW9uVGltZW91dD86IER1cmF0aW9uO1xufVxuXG4vKipcbiAqIEEgTGlzdGVuZXIgQWN0aW9uIHRvIGF1dGhlbnRpY2F0ZSB3aXRoIENvZ25pdG9cbiAqL1xuZXhwb3J0IGNsYXNzIEF1dGhlbnRpY2F0ZUNvZ25pdG9BY3Rpb24gZXh0ZW5kcyBlbGJ2Mi5MaXN0ZW5lckFjdGlvbiB7XG5cbiAgcHJpdmF0ZSBzdGF0aWMgY29uZmlnKG9wdGlvbnM6IEF1dGhlbnRpY2F0ZUNvZ25pdG9BY3Rpb25Qcm9wcyk6IGVsYnYyLkNmbkxpc3RlbmVyLkF1dGhlbnRpY2F0ZUNvZ25pdG9Db25maWdQcm9wZXJ0eSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIHVzZXJQb29sQXJuOiBvcHRpb25zLnVzZXJQb29sLnVzZXJQb29sQXJuLFxuICAgICAgdXNlclBvb2xDbGllbnRJZDogb3B0aW9ucy51c2VyUG9vbENsaWVudC51c2VyUG9vbENsaWVudElkLFxuICAgICAgdXNlclBvb2xEb21haW46IG9wdGlvbnMudXNlclBvb2xEb21haW4uZG9tYWluTmFtZSxcbiAgICAgIGF1dGhlbnRpY2F0aW9uUmVxdWVzdEV4dHJhUGFyYW1zOiBvcHRpb25zLmF1dGhlbnRpY2F0aW9uUmVxdWVzdEV4dHJhUGFyYW1zLFxuICAgICAgb25VbmF1dGhlbnRpY2F0ZWRSZXF1ZXN0OiBvcHRpb25zLm9uVW5hdXRoZW50aWNhdGVkUmVxdWVzdCxcbiAgICAgIHNjb3BlOiBvcHRpb25zLnNjb3BlLFxuICAgICAgc2Vzc2lvbkNvb2tpZU5hbWU6IG9wdGlvbnMuc2Vzc2lvbkNvb2tpZU5hbWUsXG4gICAgICBzZXNzaW9uVGltZW91dDogb3B0aW9ucy5zZXNzaW9uVGltZW91dD8udG9TZWNvbmRzKCkudG9TdHJpbmcoKSxcbiAgICB9O1xuICB9XG5cbiAgLyoqXG4gICAqIEF1dGhlbnRpY2F0ZSB1c2luZyBhbiBpZGVudGl0eSBwcm92aWRlIChJZFApIHRoYXQgaXMgY29tcGxpYW50IHdpdGggT3BlbklEIENvbm5lY3QgKE9JREMpXG4gICAqL1xuICBjb25zdHJ1Y3RvcihvcHRpb25zOiBBdXRoZW50aWNhdGVDb2duaXRvQWN0aW9uUHJvcHMpIHtcbiAgICBzdXBlcih7XG4gICAgICB0eXBlOiAnYXV0aGVudGljYXRlLWNvZ25pdG8nLFxuICAgICAgYXV0aGVudGljYXRlQ29nbml0b0NvbmZpZzogQXV0aGVudGljYXRlQ29nbml0b0FjdGlvbi5jb25maWcob3B0aW9ucyksXG4gICAgfSwgb3B0aW9ucy5uZXh0KTtcbiAgICB0aGlzLmFkZFJ1bGVBY3Rpb24oe1xuICAgICAgdHlwZTogJ2F1dGhlbnRpY2F0ZS1jb2duaXRvJyxcbiAgICAgIGF1dGhlbnRpY2F0ZUNvZ25pdG9Db25maWc6IHtcbiAgICAgICAgLi4uQXV0aGVudGljYXRlQ29nbml0b0FjdGlvbi5jb25maWcob3B0aW9ucyksXG4gICAgICAgIHNlc3Npb25UaW1lb3V0OiBvcHRpb25zLnNlc3Npb25UaW1lb3V0Py50b1NlY29uZHMoKSxcbiAgICAgIH0sXG4gICAgfSk7XG4gIH1cbn1cbiJdfQ==