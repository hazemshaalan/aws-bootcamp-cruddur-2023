"use strict";
var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m, _o, _p, _q;
Object.defineProperty(exports, "__esModule", { value: true });
exports.CrossAccountZoneDelegationRecord = exports.ZoneDelegationRecord = exports.DsRecord = exports.NsRecord = exports.MxRecord = exports.CaaAmazonRecord = exports.CaaRecord = exports.CaaTag = exports.SrvRecord = exports.TxtRecord = exports.CnameRecord = exports.AaaaRecord = exports.ARecord = exports.AddressRecordTarget = exports.RecordSet = exports.RecordTarget = exports.RecordType = void 0;
const jsiiDeprecationWarnings = require("../../.warnings.jsii.js");
const JSII_RTTI_SYMBOL_1 = Symbol.for("jsii.rtti");
const path = require("path");
const iam = require("../../aws-iam");
const core_1 = require("../../core");
const constructs_1 = require("constructs");
const route53_generated_1 = require("./route53.generated");
const util_1 = require("./util");
const CROSS_ACCOUNT_ZONE_DELEGATION_RESOURCE_TYPE = 'Custom::CrossAccountZoneDelegation';
const DELETE_EXISTING_RECORD_SET_RESOURCE_TYPE = 'Custom::DeleteExistingRecordSet';
/**
 * Context key to control whether to use the regional STS endpoint, instead of the global one
 *
 * There is only exactly one use case where you want to turn this on. If:
 *
 * - you are building an AWS service; AND
 * - would like to your own Global Service Principal in the trust policy of the delegation role; AND
 * - the target account is opted in in the same region as well
 *
 * Then you can turn this on. For all other use cases, the global endpoint is preferable:
 *
 * - if you are a regular customer, your trust policy would be in terms of account ids or
 *   organization ids, or ARNs, not Service Principals, so you don't care about this behavior.
 * - if the target account is not opted in as well, the AssumeRole call would fail
 *
 * Because this configuration option is so rare, turn it into a context setting instead
 * of a publicly available prop.
 */
const USE_REGIONAL_STS_ENDPOINT_CONTEXT_KEY = '@aws-cdk/aws-route53:useRegionalStsEndpoint';
/**
 * The record type.
 */
var RecordType;
(function (RecordType) {
    /**
     * route traffic to a resource, such as a web server, using an IPv4 address in dotted decimal
     * notation
     *
     * @see https://docs.aws.amazon.com/Route53/latest/DeveloperGuide/ResourceRecordTypes.html#AFormat
     */
    RecordType["A"] = "A";
    /**
     * route traffic to a resource, such as a web server, using an IPv6 address in colon-separated
     * hexadecimal format
     *
     * @see https://docs.aws.amazon.com/Route53/latest/DeveloperGuide/ResourceRecordTypes.html#AAAAFormat
     */
    RecordType["AAAA"] = "AAAA";
    /**
     * A CAA record specifies which certificate authorities (CAs) are allowed to issue certificates
     * for a domain or subdomain
     *
     * @see https://docs.aws.amazon.com/Route53/latest/DeveloperGuide/ResourceRecordTypes.html#CAAFormat
     */
    RecordType["CAA"] = "CAA";
    /**
     * A CNAME record maps DNS queries for the name of the current record, such as acme.example.com,
     * to another domain (example.com or example.net) or subdomain (acme.example.com or zenith.example.org).
     *
     * @see https://docs.aws.amazon.com/Route53/latest/DeveloperGuide/ResourceRecordTypes.html#CNAMEFormat
     */
    RecordType["CNAME"] = "CNAME";
    /**
     * A delegation signer (DS) record refers a zone key for a delegated subdomain zone.
     *
     * @see https://docs.aws.amazon.com/Route53/latest/DeveloperGuide/ResourceRecordTypes.html#DSFormat
     */
    RecordType["DS"] = "DS";
    /**
     * An MX record specifies the names of your mail servers and, if you have two or more mail servers,
     * the priority order.
     *
     * @see https://docs.aws.amazon.com/Route53/latest/DeveloperGuide/ResourceRecordTypes.html#MXFormat
     */
    RecordType["MX"] = "MX";
    /**
     * A Name Authority Pointer (NAPTR) is a type of record that is used by Dynamic Delegation Discovery
     * System (DDDS) applications to convert one value to another or to replace one value with another.
     * For example, one common use is to convert phone numbers into SIP URIs.
     *
     * @see https://docs.aws.amazon.com/Route53/latest/DeveloperGuide/ResourceRecordTypes.html#NAPTRFormat
     */
    RecordType["NAPTR"] = "NAPTR";
    /**
     * An NS record identifies the name servers for the hosted zone
     *
     * @see https://docs.aws.amazon.com/Route53/latest/DeveloperGuide/ResourceRecordTypes.html#NSFormat
     */
    RecordType["NS"] = "NS";
    /**
     * A PTR record maps an IP address to the corresponding domain name.
     *
     * @see https://docs.aws.amazon.com/Route53/latest/DeveloperGuide/ResourceRecordTypes.html#PTRFormat
     */
    RecordType["PTR"] = "PTR";
    /**
     * A start of authority (SOA) record provides information about a domain and the corresponding Amazon
     * Route 53 hosted zone
     *
     * @see https://docs.aws.amazon.com/Route53/latest/DeveloperGuide/ResourceRecordTypes.html#SOAFormat
     */
    RecordType["SOA"] = "SOA";
    /**
     * SPF records were formerly used to verify the identity of the sender of email messages.
     * Instead of an SPF record, we recommend that you create a TXT record that contains the applicable value.
     *
     * @see https://docs.aws.amazon.com/Route53/latest/DeveloperGuide/ResourceRecordTypes.html#SPFFormat
     */
    RecordType["SPF"] = "SPF";
    /**
     * An SRV record Value element consists of four space-separated values. The first three values are
     * decimal numbers representing priority, weight, and port. The fourth value is a domain name.
     *
     * @see https://docs.aws.amazon.com/Route53/latest/DeveloperGuide/ResourceRecordTypes.html#SRVFormat
     */
    RecordType["SRV"] = "SRV";
    /**
     * A TXT record contains one or more strings that are enclosed in double quotation marks (").
     *
     * @see https://docs.aws.amazon.com/Route53/latest/DeveloperGuide/ResourceRecordTypes.html#TXTFormat
     */
    RecordType["TXT"] = "TXT";
})(RecordType = exports.RecordType || (exports.RecordType = {}));
/**
 * Type union for a record that accepts multiple types of target.
 */
class RecordTarget {
    /**
     * Use string values as target.
     */
    static fromValues(...values) {
        return new RecordTarget(values);
    }
    /**
     * Use an alias as target.
     */
    static fromAlias(aliasTarget) {
        try {
            jsiiDeprecationWarnings.aws_cdk_lib_aws_route53_IAliasRecordTarget(aliasTarget);
        }
        catch (error) {
            if (process.env.JSII_DEBUG !== "1" && error.name === "DeprecationError") {
                Error.captureStackTrace(error, this.fromAlias);
            }
            throw error;
        }
        return new RecordTarget(undefined, aliasTarget);
    }
    /**
     * Use ip addresses as target.
     */
    static fromIpAddresses(...ipAddresses) {
        return RecordTarget.fromValues(...ipAddresses);
    }
    /**
     *
     * @param values correspond with the chosen record type (e.g. for 'A' Type, specify one or more IP addresses)
     * @param aliasTarget alias for targets such as CloudFront distribution to route traffic to
     */
    constructor(values, aliasTarget) {
        this.values = values;
        this.aliasTarget = aliasTarget;
        try {
            jsiiDeprecationWarnings.aws_cdk_lib_aws_route53_IAliasRecordTarget(aliasTarget);
        }
        catch (error) {
            if (process.env.JSII_DEBUG !== "1" && error.name === "DeprecationError") {
                Error.captureStackTrace(error, RecordTarget);
            }
            throw error;
        }
    }
}
_a = JSII_RTTI_SYMBOL_1;
RecordTarget[_a] = { fqn: "aws-cdk-lib.aws_route53.RecordTarget", version: "2.77.0" };
exports.RecordTarget = RecordTarget;
/**
 * A record set.
 */
class RecordSet extends core_1.Resource {
    constructor(scope, id, props) {
        super(scope, id);
        try {
            jsiiDeprecationWarnings.aws_cdk_lib_aws_route53_RecordSetProps(props);
        }
        catch (error) {
            if (process.env.JSII_DEBUG !== "1" && error.name === "DeprecationError") {
                Error.captureStackTrace(error, RecordSet);
            }
            throw error;
        }
        const ttl = props.target.aliasTarget ? undefined : ((props.ttl && props.ttl.toSeconds()) ?? 1800).toString();
        const recordName = (0, util_1.determineFullyQualifiedDomainName)(props.recordName || props.zone.zoneName, props.zone);
        const recordSet = new route53_generated_1.CfnRecordSet(this, 'Resource', {
            hostedZoneId: props.zone.hostedZoneId,
            name: recordName,
            type: props.recordType,
            resourceRecords: props.target.values,
            aliasTarget: props.target.aliasTarget && props.target.aliasTarget.bind(this, props.zone),
            ttl,
            comment: props.comment,
        });
        this.domainName = recordSet.ref;
        if (props.deleteExisting) {
            // Delete existing record before creating the new one
            const provider = core_1.CustomResourceProvider.getOrCreateProvider(this, DELETE_EXISTING_RECORD_SET_RESOURCE_TYPE, {
                codeDirectory: path.join(__dirname, 'delete-existing-record-set-handler'),
                runtime: (0, core_1.builtInCustomResourceProviderNodeRuntime)(this),
                policyStatements: [{
                        Effect: 'Allow',
                        Action: 'route53:GetChange',
                        Resource: '*',
                    }],
            });
            // Add to the singleton policy for this specific provider
            provider.addToRolePolicy({
                Effect: 'Allow',
                Action: 'route53:ListResourceRecordSets',
                Resource: props.zone.hostedZoneArn,
            });
            provider.addToRolePolicy({
                Effect: 'Allow',
                Action: 'route53:ChangeResourceRecordSets',
                Resource: props.zone.hostedZoneArn,
                Condition: {
                    'ForAllValues:StringEquals': {
                        'route53:ChangeResourceRecordSetsRecordTypes': [props.recordType],
                        'route53:ChangeResourceRecordSetsActions': ['DELETE'],
                    },
                },
            });
            const customResource = new core_1.CustomResource(this, 'DeleteExistingRecordSetCustomResource', {
                resourceType: DELETE_EXISTING_RECORD_SET_RESOURCE_TYPE,
                serviceToken: provider.serviceToken,
                properties: {
                    HostedZoneId: props.zone.hostedZoneId,
                    RecordName: recordName,
                    RecordType: props.recordType,
                },
            });
            recordSet.node.addDependency(customResource);
        }
    }
}
_b = JSII_RTTI_SYMBOL_1;
RecordSet[_b] = { fqn: "aws-cdk-lib.aws_route53.RecordSet", version: "2.77.0" };
exports.RecordSet = RecordSet;
/**
 * Target for a DNS A Record
 *
 * @deprecated Use RecordTarget
 */
class AddressRecordTarget extends RecordTarget {
}
_c = JSII_RTTI_SYMBOL_1;
AddressRecordTarget[_c] = { fqn: "aws-cdk-lib.aws_route53.AddressRecordTarget", version: "2.77.0" };
exports.AddressRecordTarget = AddressRecordTarget;
/**
 * A DNS A record
 *
 * @resource AWS::Route53::RecordSet
 */
class ARecord extends RecordSet {
    constructor(scope, id, props) {
        super(scope, id, {
            ...props,
            recordType: RecordType.A,
            target: props.target,
        });
        try {
            jsiiDeprecationWarnings.aws_cdk_lib_aws_route53_ARecordProps(props);
        }
        catch (error) {
            if (process.env.JSII_DEBUG !== "1" && error.name === "DeprecationError") {
                Error.captureStackTrace(error, ARecord);
            }
            throw error;
        }
    }
}
_d = JSII_RTTI_SYMBOL_1;
ARecord[_d] = { fqn: "aws-cdk-lib.aws_route53.ARecord", version: "2.77.0" };
exports.ARecord = ARecord;
/**
 * A DNS AAAA record
 *
 * @resource AWS::Route53::RecordSet
 */
class AaaaRecord extends RecordSet {
    constructor(scope, id, props) {
        super(scope, id, {
            ...props,
            recordType: RecordType.AAAA,
            target: props.target,
        });
        try {
            jsiiDeprecationWarnings.aws_cdk_lib_aws_route53_AaaaRecordProps(props);
        }
        catch (error) {
            if (process.env.JSII_DEBUG !== "1" && error.name === "DeprecationError") {
                Error.captureStackTrace(error, AaaaRecord);
            }
            throw error;
        }
    }
}
_e = JSII_RTTI_SYMBOL_1;
AaaaRecord[_e] = { fqn: "aws-cdk-lib.aws_route53.AaaaRecord", version: "2.77.0" };
exports.AaaaRecord = AaaaRecord;
/**
 * A DNS CNAME record
 *
 * @resource AWS::Route53::RecordSet
 */
class CnameRecord extends RecordSet {
    constructor(scope, id, props) {
        super(scope, id, {
            ...props,
            recordType: RecordType.CNAME,
            target: RecordTarget.fromValues(props.domainName),
        });
        try {
            jsiiDeprecationWarnings.aws_cdk_lib_aws_route53_CnameRecordProps(props);
        }
        catch (error) {
            if (process.env.JSII_DEBUG !== "1" && error.name === "DeprecationError") {
                Error.captureStackTrace(error, CnameRecord);
            }
            throw error;
        }
    }
}
_f = JSII_RTTI_SYMBOL_1;
CnameRecord[_f] = { fqn: "aws-cdk-lib.aws_route53.CnameRecord", version: "2.77.0" };
exports.CnameRecord = CnameRecord;
/**
 * A DNS TXT record
 *
 * @resource AWS::Route53::RecordSet
 */
class TxtRecord extends RecordSet {
    constructor(scope, id, props) {
        super(scope, id, {
            ...props,
            recordType: RecordType.TXT,
            target: RecordTarget.fromValues(...props.values.map(v => formatTxt(v))),
        });
        try {
            jsiiDeprecationWarnings.aws_cdk_lib_aws_route53_TxtRecordProps(props);
        }
        catch (error) {
            if (process.env.JSII_DEBUG !== "1" && error.name === "DeprecationError") {
                Error.captureStackTrace(error, TxtRecord);
            }
            throw error;
        }
    }
}
_g = JSII_RTTI_SYMBOL_1;
TxtRecord[_g] = { fqn: "aws-cdk-lib.aws_route53.TxtRecord", version: "2.77.0" };
exports.TxtRecord = TxtRecord;
/**
 * Formats a text value for use in a TXT record
 *
 * Use `JSON.stringify` to correctly escape and enclose in double quotes ("").
 *
 * DNS TXT records can contain up to 255 characters in a single string. TXT
 * record strings over 255 characters must be split into multiple text strings
 * within the same record.
 *
 * @see https://aws.amazon.com/premiumsupport/knowledge-center/route53-resolve-dkim-text-record-error/
 */
function formatTxt(string) {
    const result = [];
    let idx = 0;
    while (idx < string.length) {
        result.push(string.slice(idx, idx += 255)); // chunks of 255 characters long
    }
    return result.map(r => JSON.stringify(r)).join('');
}
/**
 * A DNS SRV record
 *
 * @resource AWS::Route53::RecordSet
 */
class SrvRecord extends RecordSet {
    constructor(scope, id, props) {
        super(scope, id, {
            ...props,
            recordType: RecordType.SRV,
            target: RecordTarget.fromValues(...props.values.map(v => `${v.priority} ${v.weight} ${v.port} ${v.hostName}`)),
        });
        try {
            jsiiDeprecationWarnings.aws_cdk_lib_aws_route53_SrvRecordProps(props);
        }
        catch (error) {
            if (process.env.JSII_DEBUG !== "1" && error.name === "DeprecationError") {
                Error.captureStackTrace(error, SrvRecord);
            }
            throw error;
        }
    }
}
_h = JSII_RTTI_SYMBOL_1;
SrvRecord[_h] = { fqn: "aws-cdk-lib.aws_route53.SrvRecord", version: "2.77.0" };
exports.SrvRecord = SrvRecord;
/**
 * The CAA tag.
 */
var CaaTag;
(function (CaaTag) {
    /**
     * Explicity authorizes a single certificate authority to issue a
     * certificate (any type) for the hostname.
     */
    CaaTag["ISSUE"] = "issue";
    /**
     * Explicity authorizes a single certificate authority to issue a
     * wildcard certificate (and only wildcard) for the hostname.
     */
    CaaTag["ISSUEWILD"] = "issuewild";
    /**
     * Specifies a URL to which a certificate authority may report policy
     * violations.
     */
    CaaTag["IODEF"] = "iodef";
})(CaaTag = exports.CaaTag || (exports.CaaTag = {}));
/**
 * A DNS CAA record
 *
 * @resource AWS::Route53::RecordSet
 */
class CaaRecord extends RecordSet {
    constructor(scope, id, props) {
        super(scope, id, {
            ...props,
            recordType: RecordType.CAA,
            target: RecordTarget.fromValues(...props.values.map(v => `${v.flag} ${v.tag} "${v.value}"`)),
        });
        try {
            jsiiDeprecationWarnings.aws_cdk_lib_aws_route53_CaaRecordProps(props);
        }
        catch (error) {
            if (process.env.JSII_DEBUG !== "1" && error.name === "DeprecationError") {
                Error.captureStackTrace(error, CaaRecord);
            }
            throw error;
        }
    }
}
_j = JSII_RTTI_SYMBOL_1;
CaaRecord[_j] = { fqn: "aws-cdk-lib.aws_route53.CaaRecord", version: "2.77.0" };
exports.CaaRecord = CaaRecord;
/**
 * A DNS Amazon CAA record.
 *
 * A CAA record to restrict certificate authorities allowed
 * to issue certificates for a domain to Amazon only.
 *
 * @resource AWS::Route53::RecordSet
 */
class CaaAmazonRecord extends CaaRecord {
    constructor(scope, id, props) {
        super(scope, id, {
            ...props,
            values: [
                {
                    flag: 0,
                    tag: CaaTag.ISSUE,
                    value: 'amazon.com',
                },
            ],
        });
        try {
            jsiiDeprecationWarnings.aws_cdk_lib_aws_route53_CaaAmazonRecordProps(props);
        }
        catch (error) {
            if (process.env.JSII_DEBUG !== "1" && error.name === "DeprecationError") {
                Error.captureStackTrace(error, CaaAmazonRecord);
            }
            throw error;
        }
    }
}
_k = JSII_RTTI_SYMBOL_1;
CaaAmazonRecord[_k] = { fqn: "aws-cdk-lib.aws_route53.CaaAmazonRecord", version: "2.77.0" };
exports.CaaAmazonRecord = CaaAmazonRecord;
/**
 * A DNS MX record
 *
 * @resource AWS::Route53::RecordSet
 */
class MxRecord extends RecordSet {
    constructor(scope, id, props) {
        super(scope, id, {
            ...props,
            recordType: RecordType.MX,
            target: RecordTarget.fromValues(...props.values.map(v => `${v.priority} ${v.hostName}`)),
        });
        try {
            jsiiDeprecationWarnings.aws_cdk_lib_aws_route53_MxRecordProps(props);
        }
        catch (error) {
            if (process.env.JSII_DEBUG !== "1" && error.name === "DeprecationError") {
                Error.captureStackTrace(error, MxRecord);
            }
            throw error;
        }
    }
}
_l = JSII_RTTI_SYMBOL_1;
MxRecord[_l] = { fqn: "aws-cdk-lib.aws_route53.MxRecord", version: "2.77.0" };
exports.MxRecord = MxRecord;
/**
 * A DNS NS record
 *
 * @resource AWS::Route53::RecordSet
 */
class NsRecord extends RecordSet {
    constructor(scope, id, props) {
        super(scope, id, {
            ...props,
            recordType: RecordType.NS,
            target: RecordTarget.fromValues(...props.values),
        });
        try {
            jsiiDeprecationWarnings.aws_cdk_lib_aws_route53_NsRecordProps(props);
        }
        catch (error) {
            if (process.env.JSII_DEBUG !== "1" && error.name === "DeprecationError") {
                Error.captureStackTrace(error, NsRecord);
            }
            throw error;
        }
    }
}
_m = JSII_RTTI_SYMBOL_1;
NsRecord[_m] = { fqn: "aws-cdk-lib.aws_route53.NsRecord", version: "2.77.0" };
exports.NsRecord = NsRecord;
/**
 * A DNS DS record
 *
 * @resource AWS::Route53::RecordSet
 */
class DsRecord extends RecordSet {
    constructor(scope, id, props) {
        super(scope, id, {
            ...props,
            recordType: RecordType.DS,
            target: RecordTarget.fromValues(...props.values),
        });
        try {
            jsiiDeprecationWarnings.aws_cdk_lib_aws_route53_DsRecordProps(props);
        }
        catch (error) {
            if (process.env.JSII_DEBUG !== "1" && error.name === "DeprecationError") {
                Error.captureStackTrace(error, DsRecord);
            }
            throw error;
        }
    }
}
_o = JSII_RTTI_SYMBOL_1;
DsRecord[_o] = { fqn: "aws-cdk-lib.aws_route53.DsRecord", version: "2.77.0" };
exports.DsRecord = DsRecord;
/**
 * A record to delegate further lookups to a different set of name servers.
 */
class ZoneDelegationRecord extends RecordSet {
    constructor(scope, id, props) {
        super(scope, id, {
            ...props,
            recordType: RecordType.NS,
            target: RecordTarget.fromValues(...core_1.Token.isUnresolved(props.nameServers)
                ? props.nameServers // Can't map a string-array token!
                : props.nameServers.map(ns => (core_1.Token.isUnresolved(ns) || ns.endsWith('.')) ? ns : `${ns}.`)),
            ttl: props.ttl || core_1.Duration.days(2),
        });
        try {
            jsiiDeprecationWarnings.aws_cdk_lib_aws_route53_ZoneDelegationRecordProps(props);
        }
        catch (error) {
            if (process.env.JSII_DEBUG !== "1" && error.name === "DeprecationError") {
                Error.captureStackTrace(error, ZoneDelegationRecord);
            }
            throw error;
        }
    }
}
_p = JSII_RTTI_SYMBOL_1;
ZoneDelegationRecord[_p] = { fqn: "aws-cdk-lib.aws_route53.ZoneDelegationRecord", version: "2.77.0" };
exports.ZoneDelegationRecord = ZoneDelegationRecord;
/**
 * A Cross Account Zone Delegation record
 */
class CrossAccountZoneDelegationRecord extends constructs_1.Construct {
    constructor(scope, id, props) {
        super(scope, id);
        try {
            jsiiDeprecationWarnings.aws_cdk_lib_aws_route53_CrossAccountZoneDelegationRecordProps(props);
        }
        catch (error) {
            if (process.env.JSII_DEBUG !== "1" && error.name === "DeprecationError") {
                Error.captureStackTrace(error, CrossAccountZoneDelegationRecord);
            }
            throw error;
        }
        if (!props.parentHostedZoneName && !props.parentHostedZoneId) {
            throw Error('At least one of parentHostedZoneName or parentHostedZoneId is required');
        }
        if (props.parentHostedZoneName && props.parentHostedZoneId) {
            throw Error('Only one of parentHostedZoneName and parentHostedZoneId is supported');
        }
        const provider = core_1.CustomResourceProvider.getOrCreateProvider(this, CROSS_ACCOUNT_ZONE_DELEGATION_RESOURCE_TYPE, {
            codeDirectory: path.join(__dirname, 'cross-account-zone-delegation-handler'),
            runtime: (0, core_1.builtInCustomResourceProviderNodeRuntime)(this),
        });
        const role = iam.Role.fromRoleArn(this, 'cross-account-zone-delegation-handler-role', provider.roleArn);
        const addToPrinciplePolicyResult = role.addToPrincipalPolicy(new iam.PolicyStatement({
            effect: iam.Effect.ALLOW,
            actions: ['sts:AssumeRole'],
            resources: [props.delegationRole.roleArn],
        }));
        const useRegionalStsEndpoint = this.node.tryGetContext(USE_REGIONAL_STS_ENDPOINT_CONTEXT_KEY);
        const customResource = new core_1.CustomResource(this, 'CrossAccountZoneDelegationCustomResource', {
            resourceType: CROSS_ACCOUNT_ZONE_DELEGATION_RESOURCE_TYPE,
            serviceToken: provider.serviceToken,
            removalPolicy: props.removalPolicy,
            properties: {
                AssumeRoleArn: props.delegationRole.roleArn,
                ParentZoneName: props.parentHostedZoneName,
                ParentZoneId: props.parentHostedZoneId,
                DelegatedZoneName: props.delegatedZone.zoneName,
                DelegatedZoneNameServers: props.delegatedZone.hostedZoneNameServers,
                TTL: (props.ttl || core_1.Duration.days(2)).toSeconds(),
                UseRegionalStsEndpoint: useRegionalStsEndpoint ? 'true' : undefined,
            },
        });
        if (addToPrinciplePolicyResult.policyDependable) {
            customResource.node.addDependency(addToPrinciplePolicyResult.policyDependable);
        }
    }
}
_q = JSII_RTTI_SYMBOL_1;
CrossAccountZoneDelegationRecord[_q] = { fqn: "aws-cdk-lib.aws_route53.CrossAccountZoneDelegationRecord", version: "2.77.0" };
exports.CrossAccountZoneDelegationRecord = CrossAccountZoneDelegationRecord;
//# sourceMappingURL=data:application/json;base64,