"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ExportReader = void 0;
const path = require("path");
const constructs_1 = require("constructs");
const types_1 = require("./types");
const cfn_resource_1 = require("../../cfn-resource");
const custom_resource_1 = require("../../custom-resource");
const lazy_1 = require("../../lazy");
const stack_1 = require("../../stack");
const custom_resource_provider_1 = require("../custom-resource-provider");
/**
 * Creates a custom resource that will return a list of stack imports from a given
 * The export can then be referenced by the export name.
 *
 * @internal - this is intentionally not exported from core
 */
class ExportReader extends constructs_1.Construct {
    static getOrCreate(scope, uniqueId, _props = {}) {
        const stack = stack_1.Stack.of(scope);
        const existing = stack.node.tryFindChild(uniqueId);
        return existing
            ? existing
            : new ExportReader(stack, uniqueId);
    }
    constructor(scope, id, _props = {}) {
        super(scope, id);
        this.importParameters = {};
        const stack = stack_1.Stack.of(this);
        const resourceType = 'Custom::CrossRegionExportReader';
        const serviceToken = custom_resource_provider_1.CustomResourceProvider.getOrCreate(this, resourceType, {
            codeDirectory: path.join(__dirname, 'cross-region-ssm-reader-handler'),
            runtime: (0, custom_resource_provider_1.builtInCustomResourceProviderNodeRuntime)(this),
            policyStatements: [{
                    Effect: 'Allow',
                    Resource: stack.formatArn({
                        service: 'ssm',
                        resource: 'parameter',
                        resourceName: `${types_1.SSM_EXPORT_PATH_PREFIX}${stack.stackName}/*`,
                    }),
                    Action: [
                        'ssm:AddTagsToResource',
                        'ssm:RemoveTagsFromResource',
                        'ssm:GetParameters',
                    ],
                }],
        });
        const properties = {
            region: stack.region,
            prefix: stack.stackName,
            imports: lazy_1.Lazy.any({ produce: () => this.importParameters }),
        };
        this.customResource = new custom_resource_1.CustomResource(this, 'Resource', {
            resourceType: resourceType,
            serviceToken,
            properties: {
                ReaderProps: properties,
            },
        });
    }
    /**
     * This is the only way to add a dependency on a custom resource currently
     */
    addDependency(resource) {
        const customResource = this.customResource.node.tryFindChild('Default');
        if (customResource && cfn_resource_1.CfnResource.isCfnResource(customResource)) {
            customResource.addDependsOn(resource);
        }
    }
    /**
     * Register a reference with the writer and returns a CloudFormation Stack export by name
     *
     * The value will be "exported" via the ExportWriter. It will perform
     * the export by creating an SSM parameter in the region that the consuming
     * stack is created.
     *
     * @param exports map of unique name associated with the export to SSM Dynamic reference
     */
    importValue(name, value) {
        this.importParameters[name] = value.toString();
        return this.customResource.getAtt(name);
    }
}
exports.ExportReader = ExportReader;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZXhwb3J0LXJlYWRlci1wcm92aWRlci5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbImV4cG9ydC1yZWFkZXItcHJvdmlkZXIudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7O0FBQUEsNkJBQTZCO0FBQzdCLDJDQUF1QztBQUN2QyxtQ0FBMEY7QUFDMUYscURBQWlEO0FBQ2pELDJEQUF1RDtBQUN2RCxxQ0FBa0M7QUFFbEMsdUNBQW9DO0FBQ3BDLDBFQUErRztBQVEvRzs7Ozs7R0FLRztBQUNILE1BQWEsWUFBYSxTQUFRLHNCQUFTO0lBQ2xDLE1BQU0sQ0FBQyxXQUFXLENBQUMsS0FBZ0IsRUFBRSxRQUFnQixFQUFFLFNBQTRCLEVBQUU7UUFDMUYsTUFBTSxLQUFLLEdBQUcsYUFBSyxDQUFDLEVBQUUsQ0FBQyxLQUFLLENBQUMsQ0FBQztRQUM5QixNQUFNLFFBQVEsR0FBRyxLQUFLLENBQUMsSUFBSSxDQUFDLFlBQVksQ0FBQyxRQUFRLENBQUMsQ0FBQztRQUNuRCxPQUFPLFFBQVE7WUFDYixDQUFDLENBQUMsUUFBd0I7WUFDMUIsQ0FBQyxDQUFDLElBQUksWUFBWSxDQUFDLEtBQUssRUFBRSxRQUFRLENBQUMsQ0FBQztLQUN2QztJQUlELFlBQVksS0FBZ0IsRUFBRSxFQUFVLEVBQUUsU0FBNEIsRUFBRTtRQUN0RSxLQUFLLENBQUMsS0FBSyxFQUFFLEVBQUUsQ0FBQyxDQUFDO1FBSEYscUJBQWdCLEdBQXVCLEVBQUUsQ0FBQztRQUl6RCxNQUFNLEtBQUssR0FBRyxhQUFLLENBQUMsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDO1FBRTdCLE1BQU0sWUFBWSxHQUFHLGlDQUFpQyxDQUFDO1FBQ3ZELE1BQU0sWUFBWSxHQUFHLGlEQUFzQixDQUFDLFdBQVcsQ0FBQyxJQUFJLEVBQUUsWUFBWSxFQUFFO1lBQzFFLGFBQWEsRUFBRSxJQUFJLENBQUMsSUFBSSxDQUFDLFNBQVMsRUFBRSxpQ0FBaUMsQ0FBQztZQUN0RSxPQUFPLEVBQUUsSUFBQSxtRUFBd0MsRUFBQyxJQUFJLENBQUM7WUFDdkQsZ0JBQWdCLEVBQUUsQ0FBQztvQkFDakIsTUFBTSxFQUFFLE9BQU87b0JBQ2YsUUFBUSxFQUFFLEtBQUssQ0FBQyxTQUFTLENBQUM7d0JBQ3hCLE9BQU8sRUFBRSxLQUFLO3dCQUNkLFFBQVEsRUFBRSxXQUFXO3dCQUNyQixZQUFZLEVBQUUsR0FBRyw4QkFBc0IsR0FBRyxLQUFLLENBQUMsU0FBUyxJQUFJO3FCQUM5RCxDQUFDO29CQUNGLE1BQU0sRUFBRTt3QkFDTix1QkFBdUI7d0JBQ3ZCLDRCQUE0Qjt3QkFDNUIsbUJBQW1CO3FCQUNwQjtpQkFDRixDQUFDO1NBQ0gsQ0FBQyxDQUFDO1FBRUgsTUFBTSxVQUFVLEdBQXdCO1lBQ3RDLE1BQU0sRUFBRSxLQUFLLENBQUMsTUFBTTtZQUNwQixNQUFNLEVBQUUsS0FBSyxDQUFDLFNBQVM7WUFDdkIsT0FBTyxFQUFFLFdBQUksQ0FBQyxHQUFHLENBQUMsRUFBRSxPQUFPLEVBQUUsR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLGdCQUFnQixFQUFFLENBQUM7U0FDNUQsQ0FBQztRQUNGLElBQUksQ0FBQyxjQUFjLEdBQUcsSUFBSSxnQ0FBYyxDQUFDLElBQUksRUFBRSxVQUFVLEVBQUU7WUFDekQsWUFBWSxFQUFFLFlBQVk7WUFDMUIsWUFBWTtZQUNaLFVBQVUsRUFBRTtnQkFDVixXQUFXLEVBQUUsVUFBVTthQUN4QjtTQUNGLENBQUMsQ0FBQztLQUNKO0lBRUQ7O09BRUc7SUFDSSxhQUFhLENBQUMsUUFBcUI7UUFDeEMsTUFBTSxjQUFjLEdBQUcsSUFBSSxDQUFDLGNBQWMsQ0FBQyxJQUFJLENBQUMsWUFBWSxDQUFDLFNBQVMsQ0FBQyxDQUFDO1FBQ3hFLElBQUksY0FBYyxJQUFJLDBCQUFXLENBQUMsYUFBYSxDQUFDLGNBQWMsQ0FBQyxFQUFFO1lBQy9ELGNBQWMsQ0FBQyxZQUFZLENBQUMsUUFBUSxDQUFDLENBQUM7U0FDdkM7S0FDRjtJQUVEOzs7Ozs7OztPQVFHO0lBQ0ksV0FBVyxDQUFDLElBQVksRUFBRSxLQUFnQjtRQUMvQyxJQUFJLENBQUMsZ0JBQWdCLENBQUMsSUFBSSxDQUFDLEdBQUcsS0FBSyxDQUFDLFFBQVEsRUFBRSxDQUFDO1FBQy9DLE9BQU8sSUFBSSxDQUFDLGNBQWMsQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLENBQUM7S0FDekM7Q0FDRjtBQXZFRCxvQ0F1RUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgKiBhcyBwYXRoIGZyb20gJ3BhdGgnO1xuaW1wb3J0IHsgQ29uc3RydWN0IH0gZnJvbSAnY29uc3RydWN0cyc7XG5pbXBvcnQgeyBTU01fRVhQT1JUX1BBVEhfUFJFRklYLCBFeHBvcnRSZWFkZXJDUlByb3BzLCBDcm9zc1JlZ2lvbkV4cG9ydHMgfSBmcm9tICcuL3R5cGVzJztcbmltcG9ydCB7IENmblJlc291cmNlIH0gZnJvbSAnLi4vLi4vY2ZuLXJlc291cmNlJztcbmltcG9ydCB7IEN1c3RvbVJlc291cmNlIH0gZnJvbSAnLi4vLi4vY3VzdG9tLXJlc291cmNlJztcbmltcG9ydCB7IExhenkgfSBmcm9tICcuLi8uLi9sYXp5JztcbmltcG9ydCB7IEludHJpbnNpYyB9IGZyb20gJy4uLy4uL3ByaXZhdGUvaW50cmluc2ljJztcbmltcG9ydCB7IFN0YWNrIH0gZnJvbSAnLi4vLi4vc3RhY2snO1xuaW1wb3J0IHsgYnVpbHRJbkN1c3RvbVJlc291cmNlUHJvdmlkZXJOb2RlUnVudGltZSwgQ3VzdG9tUmVzb3VyY2VQcm92aWRlciB9IGZyb20gJy4uL2N1c3RvbS1yZXNvdXJjZS1wcm92aWRlcic7XG5cblxuLyoqXG4gKiBQcm9wZXJ0aWVzIGZvciBhbiBFeHBvcnRSZWFkZXJcbiAqL1xuZXhwb3J0IGludGVyZmFjZSBFeHBvcnRSZWFkZXJQcm9wcyB7fVxuXG4vKipcbiAqIENyZWF0ZXMgYSBjdXN0b20gcmVzb3VyY2UgdGhhdCB3aWxsIHJldHVybiBhIGxpc3Qgb2Ygc3RhY2sgaW1wb3J0cyBmcm9tIGEgZ2l2ZW5cbiAqIFRoZSBleHBvcnQgY2FuIHRoZW4gYmUgcmVmZXJlbmNlZCBieSB0aGUgZXhwb3J0IG5hbWUuXG4gKlxuICogQGludGVybmFsIC0gdGhpcyBpcyBpbnRlbnRpb25hbGx5IG5vdCBleHBvcnRlZCBmcm9tIGNvcmVcbiAqL1xuZXhwb3J0IGNsYXNzIEV4cG9ydFJlYWRlciBleHRlbmRzIENvbnN0cnVjdCB7XG4gIHB1YmxpYyBzdGF0aWMgZ2V0T3JDcmVhdGUoc2NvcGU6IENvbnN0cnVjdCwgdW5pcXVlSWQ6IHN0cmluZywgX3Byb3BzOiBFeHBvcnRSZWFkZXJQcm9wcyA9IHt9KTogRXhwb3J0UmVhZGVyIHtcbiAgICBjb25zdCBzdGFjayA9IFN0YWNrLm9mKHNjb3BlKTtcbiAgICBjb25zdCBleGlzdGluZyA9IHN0YWNrLm5vZGUudHJ5RmluZENoaWxkKHVuaXF1ZUlkKTtcbiAgICByZXR1cm4gZXhpc3RpbmdcbiAgICAgID8gZXhpc3RpbmcgYXMgRXhwb3J0UmVhZGVyXG4gICAgICA6IG5ldyBFeHBvcnRSZWFkZXIoc3RhY2ssIHVuaXF1ZUlkKTtcbiAgfVxuXG4gIHByaXZhdGUgcmVhZG9ubHkgaW1wb3J0UGFyYW1ldGVyczogQ3Jvc3NSZWdpb25FeHBvcnRzID0ge307XG4gIHByaXZhdGUgcmVhZG9ubHkgY3VzdG9tUmVzb3VyY2U6IEN1c3RvbVJlc291cmNlO1xuICBjb25zdHJ1Y3RvcihzY29wZTogQ29uc3RydWN0LCBpZDogc3RyaW5nLCBfcHJvcHM6IEV4cG9ydFJlYWRlclByb3BzID0ge30pIHtcbiAgICBzdXBlcihzY29wZSwgaWQpO1xuICAgIGNvbnN0IHN0YWNrID0gU3RhY2sub2YodGhpcyk7XG5cbiAgICBjb25zdCByZXNvdXJjZVR5cGUgPSAnQ3VzdG9tOjpDcm9zc1JlZ2lvbkV4cG9ydFJlYWRlcic7XG4gICAgY29uc3Qgc2VydmljZVRva2VuID0gQ3VzdG9tUmVzb3VyY2VQcm92aWRlci5nZXRPckNyZWF0ZSh0aGlzLCByZXNvdXJjZVR5cGUsIHtcbiAgICAgIGNvZGVEaXJlY3Rvcnk6IHBhdGguam9pbihfX2Rpcm5hbWUsICdjcm9zcy1yZWdpb24tc3NtLXJlYWRlci1oYW5kbGVyJyksXG4gICAgICBydW50aW1lOiBidWlsdEluQ3VzdG9tUmVzb3VyY2VQcm92aWRlck5vZGVSdW50aW1lKHRoaXMpLFxuICAgICAgcG9saWN5U3RhdGVtZW50czogW3tcbiAgICAgICAgRWZmZWN0OiAnQWxsb3cnLFxuICAgICAgICBSZXNvdXJjZTogc3RhY2suZm9ybWF0QXJuKHtcbiAgICAgICAgICBzZXJ2aWNlOiAnc3NtJyxcbiAgICAgICAgICByZXNvdXJjZTogJ3BhcmFtZXRlcicsXG4gICAgICAgICAgcmVzb3VyY2VOYW1lOiBgJHtTU01fRVhQT1JUX1BBVEhfUFJFRklYfSR7c3RhY2suc3RhY2tOYW1lfS8qYCxcbiAgICAgICAgfSksXG4gICAgICAgIEFjdGlvbjogW1xuICAgICAgICAgICdzc206QWRkVGFnc1RvUmVzb3VyY2UnLFxuICAgICAgICAgICdzc206UmVtb3ZlVGFnc0Zyb21SZXNvdXJjZScsXG4gICAgICAgICAgJ3NzbTpHZXRQYXJhbWV0ZXJzJyxcbiAgICAgICAgXSxcbiAgICAgIH1dLFxuICAgIH0pO1xuXG4gICAgY29uc3QgcHJvcGVydGllczogRXhwb3J0UmVhZGVyQ1JQcm9wcyA9IHtcbiAgICAgIHJlZ2lvbjogc3RhY2sucmVnaW9uLFxuICAgICAgcHJlZml4OiBzdGFjay5zdGFja05hbWUsXG4gICAgICBpbXBvcnRzOiBMYXp5LmFueSh7IHByb2R1Y2U6ICgpID0+IHRoaXMuaW1wb3J0UGFyYW1ldGVycyB9KSxcbiAgICB9O1xuICAgIHRoaXMuY3VzdG9tUmVzb3VyY2UgPSBuZXcgQ3VzdG9tUmVzb3VyY2UodGhpcywgJ1Jlc291cmNlJywge1xuICAgICAgcmVzb3VyY2VUeXBlOiByZXNvdXJjZVR5cGUsXG4gICAgICBzZXJ2aWNlVG9rZW4sXG4gICAgICBwcm9wZXJ0aWVzOiB7XG4gICAgICAgIFJlYWRlclByb3BzOiBwcm9wZXJ0aWVzLFxuICAgICAgfSxcbiAgICB9KTtcbiAgfVxuXG4gIC8qKlxuICAgKiBUaGlzIGlzIHRoZSBvbmx5IHdheSB0byBhZGQgYSBkZXBlbmRlbmN5IG9uIGEgY3VzdG9tIHJlc291cmNlIGN1cnJlbnRseVxuICAgKi9cbiAgcHVibGljIGFkZERlcGVuZGVuY3kocmVzb3VyY2U6IENmblJlc291cmNlKTogdm9pZCB7XG4gICAgY29uc3QgY3VzdG9tUmVzb3VyY2UgPSB0aGlzLmN1c3RvbVJlc291cmNlLm5vZGUudHJ5RmluZENoaWxkKCdEZWZhdWx0Jyk7XG4gICAgaWYgKGN1c3RvbVJlc291cmNlICYmIENmblJlc291cmNlLmlzQ2ZuUmVzb3VyY2UoY3VzdG9tUmVzb3VyY2UpKSB7XG4gICAgICBjdXN0b21SZXNvdXJjZS5hZGREZXBlbmRzT24ocmVzb3VyY2UpO1xuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBSZWdpc3RlciBhIHJlZmVyZW5jZSB3aXRoIHRoZSB3cml0ZXIgYW5kIHJldHVybnMgYSBDbG91ZEZvcm1hdGlvbiBTdGFjayBleHBvcnQgYnkgbmFtZVxuICAgKlxuICAgKiBUaGUgdmFsdWUgd2lsbCBiZSBcImV4cG9ydGVkXCIgdmlhIHRoZSBFeHBvcnRXcml0ZXIuIEl0IHdpbGwgcGVyZm9ybVxuICAgKiB0aGUgZXhwb3J0IGJ5IGNyZWF0aW5nIGFuIFNTTSBwYXJhbWV0ZXIgaW4gdGhlIHJlZ2lvbiB0aGF0IHRoZSBjb25zdW1pbmdcbiAgICogc3RhY2sgaXMgY3JlYXRlZC5cbiAgICpcbiAgICogQHBhcmFtIGV4cG9ydHMgbWFwIG9mIHVuaXF1ZSBuYW1lIGFzc29jaWF0ZWQgd2l0aCB0aGUgZXhwb3J0IHRvIFNTTSBEeW5hbWljIHJlZmVyZW5jZVxuICAgKi9cbiAgcHVibGljIGltcG9ydFZhbHVlKG5hbWU6IHN0cmluZywgdmFsdWU6IEludHJpbnNpYyk6IEludHJpbnNpYyB7XG4gICAgdGhpcy5pbXBvcnRQYXJhbWV0ZXJzW25hbWVdID0gdmFsdWUudG9TdHJpbmcoKTtcbiAgICByZXR1cm4gdGhpcy5jdXN0b21SZXNvdXJjZS5nZXRBdHQobmFtZSk7XG4gIH1cbn1cbiJdfQ==